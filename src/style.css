*, *::before, *::after {
	box-sizing: border-box;
}

:root {
	color-scheme: dark light;
}

body {
	font-family: sans-serif;
	max-width: 768px;
	display: flex;
	flex-direction: column;
	margin: 0 auto;
	padding: 16px;
}

h1, h2, h3, h4, h5, h6 {
	margin: 0;
}

label {
	display: flex;
	align-items: center;
	justify-content: space-between;
}

label > span {
	display: block;
	margin-bottom: 4px;
	flex-grow: 1;
}

input, button {
	font: inherit;
	line-height: inherit;
	padding: 8px;
	height: 36px;
}

hr {
	color: transparent;
	border: 0;
	border-bottom: 1px solid #808080;
	margin: 16px 0;
}

table {
	width: 100%;
	border-collapse: collapse;
}

th {
	font-weight: 700;
	text-align: left;
	padding-right: 16px;
}

td {
	width: 35%;
	text-align: right;
}

td input {
	all: unset;
}

x-app {
	display: grid;
	grid-template-areas: 'header header' 'sidebar display';
	grid-template-columns: 280px minmax(0, 1fr);
	gap: 16px;
}

@media (max-width: 680px) {
	x-app {
		grid-template-areas: 'header' 'sidebar' 'display';
		grid-template-columns: unset;
	}
}

.header {
	grid-area: header;
}

.sidebar {
	grid-area: sidebar;
	display: grid;
	gap: 16px;
	align-content: baseline;
}

.display {
	grid-area: display;
	table-layout: fixed;
}
.display th,
.display td {
	color: GrayText;
}
.display .highlight {
	color: CanvasText;
}

.search {
	position: relative;
}

.search input {
	width: 100%;
}

.search .autocomplete {
	list-style-type: none;
	color: FieldText;
	background-color: Field;
	box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
	display: none;
	width: 100%;
	max-height: 50vh;
	padding: 0;
	margin: 8px 0 0;
	overflow-y: auto;
	border: 1px solid;
	border-color: ThreeDLightShadow;
	border-color: ButtonBorder;
	border-radius: 3px;
	position: absolute;
	top: 100%;
	z-index: 3;
}

.search:focus-within .autocomplete {
	display: block;
}

.search.escaped .autocomplete {
	display: none;
}

.search .autocomplete.empty::before {
	content: 'No results found';
	color: GrayText;
	display: list-item;
	padding: 8px;
}

.search input:is(:not([data-query]), [data-query='']) + .autocomplete.empty::before {
	content: 'Start searching!';
}

.search .autocomplete li {
	user-select: none;
	padding: 8px;
}

.search .autocomplete li[data-bp]::after {
	color: GrayText;
	content: ' (' attr(data-bp) ' BP)';
}

.search .autocomplete li.selected,
.search .autocomplete li:hover {
	color: black;
	background-color: Highlight;
}

.search .autocomplete li[data-bp].selected::after,
.search .autocomplete li[data-bp]:hover::after {
	color: black;
}

.augments {
	list-style-type: none;
	padding: 0;
	margin: 0;
}

.augments li {
	user-select: none;
	padding: 8px;
	border-radius: 3px;
}

.augments li:hover {
	color: black;
	background-color: Highlight;
}

.augments:empty::before {
	color: GrayText;
	content: 'No augments listed';
	display: block;
	padding: 8px;
}
